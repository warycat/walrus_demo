use std::str::FromStr;
use crate::ast::*;

grammar;

pub Program: Vec<Function> = 
    <functions:Function*> => functions.into_iter().collect();

Function: Function = {
    <prototype:Prototype> "{" <expr:Expr> "}" => Function::new(prototype, expr)
};

Prototype: Prototype = {
    "def" <name:Identifier> "(" <params:Comma<Identifier>> ")" => Prototype::new(name, params)
};

Comma<E>: Vec<E> =
    <v0:(<E> ",")*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();

Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    <name:Identifier> "(" <exprs:Comma<Expr>> ")" => Box::new(Expr::Call(name, exprs)),
    Identifier => Box::new(Expr::Variable(<>)),
    Number => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
};

Number: f64 = {
    r"[-+]?[0-9]*\.?[0-9]*" => f64::from_str(<>).unwrap()
};

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => String::from_str(<>).unwrap()
}

